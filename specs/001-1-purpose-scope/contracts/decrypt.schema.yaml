# Contract: Decrypt Messages (Recovery)
# Command: will-encrypt decrypt

command: decrypt

description: |
  Emergency recovery operation. Collect K BIP39 mnemonic shares from key holders,
  reconstruct passphrase, decrypt private keys, and decrypt all messages in vault.
  Intended for beneficiaries in legitimate emergencies (death, incapacitation).

arguments:
  - name: --vault
    type: path
    required: false
    default: "./vault.yaml"
    validation:
      - must_exist: true
      - readable: true
      - format: yaml
    description: Path to vault file
    example: "--vault /path/to/vault.yaml"

  - name: --shares
    type: string_array
    required: false
    validation:
      - each_element: "24 words separated by spaces"
      - bip39_checksum: true
      - count: ">= K (from vault manifest)"
    description: BIP39 mnemonic shares (space-separated, quoted)
    example: '--shares "word1 word2 ... word24" "word1 word2 ... word24" "word1 word2 ... word24"'

  - name: --interactive
    type: boolean
    required: false
    default: true
    description: Prompt for shares interactively (secure, no shell history)
    example: "--interactive"

  - name: --output
    type: path
    required: false
    default: "stdout"
    validation:
      - writable: true
    description: Write decrypted messages to file instead of stdout
    example: "--output decrypted_messages.txt"

  - name: --message-id
    type: integer
    required: false
    validation:
      - exists_in_vault: true
    description: Decrypt only specific message ID (instead of all)
    example: "--message-id 5"

inputs:
  shares:
    source: "Interactive prompts (default) OR --shares argument"
    count: "K shares (from vault manifest)"
    format: "24 words per share, BIP39 standard wordlist"
    validation:
      - bip39_checksum: true
      - sufficient_count: ">= K"
    security:
      - shares_zeroed_after_use: true
      - passphrase_zeroed_after_use: true
      - private_keys_zeroed_after_use: true

outputs:
  terminal_display:
    format: |
      ====================================
      MESSAGE RECOVERY
      ====================================

      Message ID: 1
      Title: Bank Account Passwords
      Created: 2025-10-07T10:00:00Z
      Size: 1024 bytes
      ────────────────────────────────────
      [Decrypted plaintext content]
      ════════════════════════════════════

      Message ID: 2
      Title: Estate Instructions
      Created: 2025-10-08T14:00:00Z
      Size: 2048 bytes
      ────────────────────────────────────
      [Decrypted plaintext content]
      ════════════════════════════════════

      Total messages decrypted: 2

  file_output:
    condition: "If --output specified"
    format: "Plain text, UTF-8, each message separated by ═══ delimiters"

exit_codes:
  0: Success - all messages decrypted
  1: Invalid arguments
  2: Vault file not found or invalid format
  3: Insufficient shares (< K provided)
  4: Invalid share (BIP39 checksum failure)
  5: Passphrase reconstruction failed
  6: Private key decryption failed (wrong passphrase)
  7: Message decryption failed (corrupted ciphertext or tampered data)
  8: Hybrid verification failed (RSA KEK ≠ Kyber KEK)

performance:
  target_duration: "< 30 minutes for non-technical user (includes share collection)"
  actual_crypto_duration: "< 5 seconds for 100 messages"
  bottlenecks:
    - Share collection from key holders (20-25 minutes)
    - PBKDF2 key derivation (~1 second)
    - RSA-4096 decryption per message (~0.1 sec)
    - Kyber-1024 decryption per message (~0.05 sec)

security_requirements:
  - Shares MUST be validated (BIP39 checksum) before use
  - Passphrase MUST be reconstructed using Shamir SSS
  - Both RSA and Kyber KEKs MUST decrypt successfully and match (hybrid verification)
  - AES-GCM authentication tags MUST be verified (tamper detection)
  - All secrets (shares, passphrase, private keys, KEKs) MUST be zeroed from memory after use

interactive_flow: |
  $ will-encrypt decrypt --vault vault.yaml

  ====================================
  EMERGENCY RECOVERY
  ====================================

  Vault: /path/to/vault.yaml
  Threshold: 3 of 5 shares required

  Collecting shares from key holders...

  Enter share 1 of 3:
  (Paste 24-word BIP39 mnemonic)
  > abandon ability able about above absent absorb abstract absurd abuse access accident account accuse achieve acid acoustic acquire across act action actor actress actual
  ✓ Share 1 valid

  Enter share 2 of 3:
  > adapt add addict address adjust admit adult advance advice aerobic affair afford afraid after again age agent agree ahead aim air airport aisle alarm
  ✓ Share 2 valid

  Enter share 3 of 3:
  > album alcohol alert alien all alley allow almost alone alpha already also alter amazing among amount amused analyst anchor ancient anger angle angry animal
  ✓ Share 3 valid

  Reconstructing passphrase...
  Decrypting private keys...
  Decrypting messages...

  ====================================
  MESSAGE RECOVERY
  ====================================

  [Decrypted messages displayed]

example_usage: |
  # Interactive recovery (secure, recommended)
  will-encrypt decrypt --vault vault.yaml

  # Non-interactive (shares from command line, NOT RECOMMENDED - shell history risk)
  will-encrypt decrypt --vault vault.yaml --shares \
    "word1 word2 ... word24" \
    "word1 word2 ... word24" \
    "word1 word2 ... word24"

  # Decrypt to file
  will-encrypt decrypt --vault vault.yaml --output recovered_messages.txt

  # Decrypt single message
  will-encrypt decrypt --vault vault.yaml --message-id 5
