# Contract: Encrypt Message
# Command: will-encrypt encrypt

command: encrypt

description: |
  Encrypt a new message and append it to the vault. Message plaintext is entered
  via in-memory terminal editor (never written to disk). Encrypted using hybrid
  RSA-4096 + Kyber-1024 with AES-256-GCM. No shares required for encryption.

arguments:
  - name: --vault
    type: path
    required: false
    default: "./vault.yaml"
    validation:
      - must_exist: true
      - readable: true
      - writable: true
      - format: yaml
    description: Path to existing vault file
    example: "--vault /path/to/vault.yaml"

  - name: --title
    type: string
    required: true
    validation:
      - not_empty: true
      - max_length: 256
      - utf8: true
    description: Unencrypted message title (for listing/identification)
    example: '--title "Bank Account Passwords"'

  - name: --editor
    type: string
    required: false
    default: "$EDITOR or nano"
    validation:
      - executable_exists: true
    description: Terminal editor to use for message input
    example: "--editor vim"

  - name: --message
    type: string
    required: false
    validation:
      - max_length: 65536  # 64 KB
      - utf8: true
    description: Message plaintext (alternative to editor, for scripting)
    example: '--message "Password: hunter2"'

  - name: --stdin
    type: boolean
    required: false
    default: false
    description: Read message from stdin (for scripting/piping)
    example: "echo 'secret' | will-encrypt encrypt --stdin --title 'Test'"

inputs:
  message_content:
    source: "Terminal editor (--editor) OR --message argument OR stdin (--stdin)"
    validation:
      - size: "<= 64 KB (65,536 bytes)"
      - encoding: "UTF-8"
    security:
      - never_written_to_disk: true
      - held_in_memory_only: true
      - zeroed_after_encryption: true

outputs:
  vault_file:
    path: "Value of --vault argument"
    modification: "Append new message to messages array"
    updates:
      - messages[]: "New Message object"
      - manifest.fingerprints.vault_sha256: "Updated hash"

  terminal_display:
    - success_message: "Message encrypted successfully"
    - message_id: "Sequential ID of new message"
    - ciphertext_size: "Size in bytes"

exit_codes:
  0: Success
  1: Invalid arguments (missing title, message too large)
  2: Vault file not found or invalid format
  3: Public key read error
  4: Message size exceeds 64 KB
  5: Encryption operation failed
  6: Vault write error (permissions, disk full)

performance:
  target_duration: "< 1 second for 64 KB message"
  bottlenecks:
    - AES-256-GCM encryption (~0.1 sec for 64 KB)
    - RSA-4096 encryption (~0.1 sec)
    - Kyber-1024 encryption (~0.05 sec)
    - YAML serialization (~0.1 sec)

security_requirements:
  - Message plaintext MUST NOT be written to disk or temp files
  - Ephemeral KEK MUST be 256 bits from secrets.token_bytes()
  - Nonce MUST be 96 bits from secrets.token_bytes(), unique per message
  - AAD (Additional Authenticated Data) MUST include message title
  - Plaintext and KEK MUST be zeroed from memory after encryption

example_usage: |
  # Encrypt message using terminal editor
  will-encrypt encrypt --vault vault.yaml --title "Gmail Password"
  # [Opens editor, user types message, saves and exits]
  Message encrypted successfully.
  Message ID: 7
  Ciphertext size: 156 bytes

  # Encrypt message from command line
  will-encrypt encrypt --vault vault.yaml --title "WiFi Password" --message "MySecretWiFi123"
  Message encrypted successfully.
  Message ID: 8

  # Encrypt message from stdin
  echo "Database credentials: user=admin pass=secret" | \
    will-encrypt encrypt --vault vault.yaml --title "DB Credentials" --stdin
  Message encrypted successfully.
  Message ID: 9
